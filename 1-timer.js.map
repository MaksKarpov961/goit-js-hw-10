{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Імпортуємо бібліотеку flatpickr\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\n\n// Імпортуємо бібліотеку iziToast\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// Отримуємо елемент кнопки старт\nconst buttonEl = document.querySelector('[data-start]');\n\n// Отримуємо елемент інпуту\nconst inputEl = document.querySelector('#datetime-picker')\n\n// Функція для вимкнення кнопки\nfunction disableButtonStart() {\n  buttonEl.disabled = true; \n}\ndisableButtonStart(); // Вимикаємо кнопку на початку\n\n// Функція для ввімкнення кнопки\nfunction enableButtonStart() {\n  buttonEl.disabled = false; \n}\n\n// Функція для вимкнення Інпуту\nfunction disableInput() {\n  inputEl.disabled = true; \n}\n\n// Функція для ввімкнення Інпуту\nfunction enableInput() {\n  inputEl.disabled = false; \n}\n\n// Оголошення змінної для обраної дати\nlet userSelectedDate = null;\n\n// Параметри бібліотеки flatpickr\nconst options = {\n  enableTime: true, // Дозволяє вибір часу\n  time_24hr: true, // Використовує 24-годинний формат часу\n  defaultDate: new Date(), // Встановлює поточну дату як значення за замовчуванням\n  minuteIncrement: 1, // Крок вибору хвилин в інтерфейсі\n  onClose(selectedDates) { // Обробник події закриття календаря\n    userSelectedDate = selectedDates[0]; // Зберігає вибрану дату\n\n    // Виклик функції для перевірки обраної дати\n    checkingCorrectDate(userSelectedDate);\n  },\n};\n\n// Функція для перевірки коректності дати\nfunction checkingCorrectDate(selectedDate) {\n  const currentDate = new Date(); // Отримуємо поточну дату\n  \n  if (selectedDate < currentDate) { // Якщо вибрана дата менша за поточну\n\n    iziToast.error({ // Показуємо повідомлення про помилку\n      message: 'Please choose a date in the future', // Текст повідомлення\n      position: 'topRight', // Позиція повідомлення: у верхньому правому куті\n      timeout: false // Час, протягом якого повідомлення буде відображатися\n    });\n\n    disableButtonStart(); // Вимикаємо кнопку\n  } else {\n    enableButtonStart(); // Дата в майбутньому, включаємо кнопку\n  }\n}\n\n// Ініціалізація flatpickr з параметрами\nflatpickr('#datetime-picker', options);\n\n// Функція для перетворення мілісекунд у дні, години, хвилини та секунди\nfunction convertMs(ms) {\n  const second = 1000; \n  const minute = second * 60; \n  const hour = minute * 60; \n  const day = hour * 24; \n\n  // Розрахунок залишкових днів, годин, хвилин та секунд\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds }; // Повертає об'єкт з розрахованими значеннями\n}\n\nlet timerInterval; // Змінна для зберігання ідентифікатора інтервалу таймера\n\n// Функція для оновлення таймера\nfunction updateTimer() {\n  const currentDate = new Date(); // Отримуємо поточну дату\n  const timeDifference = userSelectedDate - currentDate; // Розрахунок різниці між вибраною датою і поточною датою\n\n  if (timeDifference <= 0) { // Якщо різниця менша або дорівнює нулю\n    clearInterval(timerInterval); // Очищаємо інтервал таймера\n    enableInput(); // Дозволяємо редагування інпуту\n    return;\n  }\n\n  const time = convertMs(timeDifference); // Конвертуємо мілісекунди в дні, години, хвилини та секунди\n  // Оновлюємо текст в елементах для відображення таймера\n  document.querySelector('[data-days]').textContent = String(time.days).padStart(2, '0');\n  document.querySelector('[data-hours]').textContent = String(time.hours).padStart(2, '0');\n  document.querySelector('[data-minutes]').textContent = String(time.minutes).padStart(2, '0');\n  document.querySelector('[data-seconds]').textContent = String(time.seconds).padStart(2, '0');\n}\n\n// Функція для старту таймера\nconst timerStart = () => {\n  disableButtonStart(); // Вимикаємо кнопку\n  disableInput(); // Вимикаємо інпут\n  timerInterval = setInterval(updateTimer, 1000); // Запускаємо таймер, який оновлюється кожну секунду\n  updateTimer(); // Оновлюємо таймер одразу після старту\n};\n\n// Додаємо обробник подій для кнопки старту\nbuttonEl.addEventListener('click', timerStart);\n\n"],"names":["buttonEl","inputEl","disableButtonStart","enableButtonStart","disableInput","enableInput","userSelectedDate","options","selectedDates","checkingCorrectDate","selectedDate","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","timerInterval","updateTimer","timeDifference","time","timerStart"],"mappings":"0IAUA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAGhDC,EAAU,SAAS,cAAc,kBAAkB,EAGzD,SAASC,GAAqB,CAC5BF,EAAS,SAAW,EACtB,CACAE,IAGA,SAASC,GAAoB,CAC3BH,EAAS,SAAW,EACtB,CAGA,SAASI,GAAe,CACtBH,EAAQ,SAAW,EACrB,CAGA,SAASI,GAAc,CACrBJ,EAAQ,SAAW,EACrB,CAGA,IAAIK,EAAmB,KAGvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,CAAC,EAGlCC,EAAoBH,CAAgB,CACrC,CACH,EAGA,SAASG,EAAoBC,EAAc,CAGrCA,EAFgB,IAAI,MAItBC,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,WACV,QAAS,EACf,CAAK,EAEDT,KAEAC,GAEJ,CAGAS,EAAU,mBAAoBL,CAAO,EAGrC,SAASM,EAAUC,EAAI,CAOrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,IAAIC,EAGJ,SAASC,GAAc,CAErB,MAAMC,EAAiBf,EADH,IAAI,KAGxB,GAAIe,GAAkB,EAAG,CACvB,cAAcF,CAAa,EAC3Bd,IACA,MACD,CAED,MAAMiB,EAAOT,EAAUQ,CAAc,EAErC,SAAS,cAAc,aAAa,EAAE,YAAc,OAAOC,EAAK,IAAI,EAAE,SAAS,EAAG,GAAG,EACrF,SAAS,cAAc,cAAc,EAAE,YAAc,OAAOA,EAAK,KAAK,EAAE,SAAS,EAAG,GAAG,EACvF,SAAS,cAAc,gBAAgB,EAAE,YAAc,OAAOA,EAAK,OAAO,EAAE,SAAS,EAAG,GAAG,EAC3F,SAAS,cAAc,gBAAgB,EAAE,YAAc,OAAOA,EAAK,OAAO,EAAE,SAAS,EAAG,GAAG,CAC7F,CAGA,MAAMC,EAAa,IAAM,CACvBrB,IACAE,IACAe,EAAgB,YAAYC,EAAa,GAAI,EAC7CA,GACF,EAGApB,EAAS,iBAAiB,QAASuB,CAAU"}