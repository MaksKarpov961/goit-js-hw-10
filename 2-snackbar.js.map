{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\n// Отримуємо посилання на форму і елемент інпуту\nconst inputValueEl = document.querySelector('[name=\"delay\"]');\nconst registerForm = document.querySelector(\".form\");\n\n\n  // Додаємо обробник події на сабміт форми\n  registerForm.addEventListener(\"submit\", handleSubmit);\n\n  // Функція для створення промісу\n  function createPromise(delay, state) {\n    // Створюємо новий проміс\n    return new Promise((resolve, reject) => {\n      // Використовуємо setTimeout для затримки\n      setTimeout(() => {\n        if (state === 'fulfilled') {\n          // Якщо стан \"fulfilled\", проміс виконується через delay мілісекунд\n          resolve(delay);\n        } else if (state === 'rejected') {\n          // Якщо стан \"rejected\", проміс відхиляється через delay мілісекунд\n          reject(delay);\n        }\n      }, delay); // Затримка у мілісекундах\n    });\n  }\n\n  // Функція для обробки сабміту форми\n  function handleSubmit(event) {\n    event.preventDefault(); // Запобігаємо стандартному перезавантаженню сторінки\n\n    // Отримуємо значення затримки з поля введення та конвертуємо його в число\n    const delay = Number(inputValueEl.value);\n    // Отримуємо вибраний стан з радіокнопок\n    const state = document.querySelector('[name=\"state\"]:checked').value;\n\n    // console.log(state);\n    \n    // Створюємо проміс\n    createPromise(delay, state)\n      .then(delay => {\n        // Якщо проміс успішно виконується, показуємо сповіщення про успіх\n        iziToast.success({\n          message: `Fulfilled promise in ${delay}ms`, // Повідомлення про успіх\n          position: 'topRight' // Розташування сповіщення на екрані\n        });\n      })\n      .catch(delay => {\n        // Якщо проміс відхиляється, показуємо сповіщення про помилку\n        iziToast.error({\n          message: `Rejected promise in ${delay}ms`, // Повідомлення про помилку\n          position: 'topRight' // Розташування сповіщення на екрані\n        });\n      });\n    \n    // Очищення інпуту\n    inputValueEl.value = '';\n\n        // Скидання вибору радіокнопок\n    const radioButtons = document.querySelectorAll('[name=\"state\"]');\n    radioButtons.forEach(button => {\n      button.checked = false;\n    });\n  }"],"names":["inputValueEl","registerForm","handleSubmit","createPromise","delay","state","resolve","reject","event","iziToast","button"],"mappings":"wIAOA,MAAMA,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,OAAO,EAIjDA,EAAa,iBAAiB,SAAUC,CAAY,EAGpD,SAASC,EAAcC,EAAOC,EAAO,CAEnC,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CAEtC,WAAW,IAAM,CACXF,IAAU,YAEZC,EAAQF,CAAK,EACJC,IAAU,YAEnBE,EAAOH,CAAK,CAEf,EAAEA,CAAK,CACd,CAAK,CACF,CAGD,SAASF,EAAaM,EAAO,CAC3BA,EAAM,eAAc,EAGpB,MAAMJ,EAAQ,OAAOJ,EAAa,KAAK,EAEjCK,EAAQ,SAAS,cAAc,wBAAwB,EAAE,MAK/DF,EAAcC,EAAOC,CAAK,EACvB,KAAKD,GAAS,CAEbK,EAAS,QAAQ,CACf,QAAS,wBAAwBL,CAAK,KACtC,SAAU,UACpB,CAAS,CACT,CAAO,EACA,MAAMA,GAAS,CAEdK,EAAS,MAAM,CACb,QAAS,uBAAuBL,CAAK,KACrC,SAAU,UACpB,CAAS,CACT,CAAO,EAGHJ,EAAa,MAAQ,GAGA,SAAS,iBAAiB,gBAAgB,EAClD,QAAQU,GAAU,CAC7BA,EAAO,QAAU,EACvB,CAAK,CACL"}